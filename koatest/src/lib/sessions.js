const redisStore = require('koa-redis');
const session = require('koa-generic-session');

const _ = require('lodash');

const utils = require('./utils');
const redis = require('./redisclient');
const CONFIG = require('./settings').CONFIG_DATA;


let redisStore_Options = {
	db: 1, 											// will run client.select(db) after connection
	client: redis, 									// supply your own client, all other options are ignored unless duplicate is also supplied
	duplicate: true									// When true, it will run client.duplicate(options) on the supplied client and use all 
	                								// other options supplied. This is useful if you want to select a different DB for 
	                								// sessions but also want to base from the same client object.
};


// create the redisStore with the options
let redis_Store = redisStore(redisStore_Options);

let genid = _.partial(utils.genid, 32); 

function sessionErrorHandler(err, type, ctx) {
	err.name = 'koa-generic-session ' + type + ' error';
	ctx.log.error(err);
	
	ctx.state = ctx.state || {};
	ctx.state.error = ctx.state.error || {};

	if (type == 'get') {
		ctx.state.error.session_handler = CONFIG.codes.error.SESSION_GET_ERROR;
	}
	else {
		ctx.state.error.session_handler = CONFIG.codes.error.SESSION_SET_ERROR;
	}  

	ctx.throw('session-handler-error', 423);	
}


// Options for session
let session_Options = {
	key: CONFIG.session.key,									// cookie name defaulting to koa.sid
	prefix: CONFIG.session.prefix,						// session prefix for store, defaulting to koa:sess:
	ttl: CONFIG.session.ttl,										// ttl is for sessionStore's expiration time. it is different with
	           										// cookie.maxage, default to null(means get ttl from cookie.maxage).
	rolling: false,									// rolling session, always reset the cookie and sessions, defaults to false
	genSid: genid,									// default sid was generated by uid2, you can pass a function to replace it
	defer: false,									// defers get session, only generate a session when you use it through 
	            									// var session = yield this.session;, defaults to false
	allowEmpty: false,								// allow generation of empty sessions
	errorHandler: sessionErrorHandler,				// Store.get and Store.set will throw in some situation, use 
	                                 				// errorHandler(err, type, ctx) to handle these errors by yourself. Otherwise, 
	                                 				// defaultErrorHandler will throw.
	reconnectTimeout: 30,							// When store is disconnected, don't throw store unavailable error 
	                     							// immediately, wait reconnectTimeout to reconnect, default is 10s.
	// valid: 										// valid(ctx, session), valid session value before use it
	// beforeSave: 									// beforeSave(ctx, session), hook before save session
	store: redis_Store,								// session store instance. It can be any Object that has the methods 
	                  								// set, get, destroy like MemoryStore.
	cookie: {										// session cookie settings, defaulting to
	  	path: CONFIG.cookie.path,
	  	httpOnly: CONFIG.cookie.httpOnly,
	  	maxAge: CONFIG.cookie.maxAge,
	  	overwrite: CONFIG.cookie.overwrite,
	  	signed: CONFIG.cookie.signed,
	  	secure: CONFIG.cookie.secure
	}

};


const session_Middleware = session(session_Options);


exports.session_Middleware = session_Middleware;

